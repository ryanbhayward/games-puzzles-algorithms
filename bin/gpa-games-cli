#!/usr/bin/env python3

import argparse
import random
from datetime import datetime

from games_puzzles_algorithms.games.hex.game_state \
    import GameState as HexGameState
from games_puzzles_algorithms.games.hex.color \
    import COLOR_SYMBOLS, color_to_player, COLOR_BLACK, COLOR_WHITE, next_player

from games_puzzles_algorithms.games.ttt.game_state \
    import GameState as TttGameState
from games_puzzles_algorithms.games.ttt.game_state \
    import BoardValues as TttBoardValues

from games_puzzles_algorithms.players.rule_based.random_agent \
    import RandomAgent
from games_puzzles_algorithms.players.rule_based.first_action_agent \
    import FirstActionAgent
from games_puzzles_algorithms.players.mcts.mcts_agent import MctsAgent, UctNode
from games_puzzles_algorithms.players.mcts.rave_agent import RaveAgent
from games_puzzles_algorithms.players.mcts.rave_agent import RaveNode
from games_puzzles_algorithms.players.minimax.minimax_agent import MinimaxAgent
from games_puzzles_algorithms.players.minimax.alpha_beta_agent import AlphaBetaAgent
from games_puzzles_algorithms.games.cli import Cli


class UiGameState(object):

    def __init__(self, *args, **kwargs): self.reset(*args, **kwargs)

    def reset(self, *args, **kwargs):
        self.state = self.new_state(*args, **kwargs)
        return self

    def ui_action_to_action(self, ui_action): return ui_action

    def action_to_ui_action(self, action): return action

    def state_to_ui_state(self): return str(self.state)

    def player_to_ui_player(self, player): return player

    def ui_player_to_player(self, ui_player): return ui_player


class HexCliGameState(UiGameState):

    @classmethod
    def new_state(self, *args, **kwargs):
        return HexGameState.root(*args, **kwargs)

    def ui_action_to_action(self, ui_action):
        column = ord(ui_action[0].lower()) - ord('a')
        row = int(ui_action[1:]) - 1
        return self.state.board.cell_index(row, column)

    def action_to_ui_action(self, action):
        row = self.state.board.row(action)
        column = self.state.board.column(action)
        return chr(ord('a') + column) + str(row + 1)

    def player_to_ui_player(self, player): return COLOR_SYMBOLS[player]

    def ui_player_to_player(self, ui_player):
        ui_player = ui_player.strip().lower()
        if (ui_player == 'w' or ui_player == 'white'
                or ui_player
                == COLOR_SYMBOLS[color_to_player(COLOR_WHITE)].lower()):
            return color_to_player(COLOR_WHITE)
        elif (ui_player == 'b' or ui_player == 'black'
                or ui_player
              == COLOR_SYMBOLS[color_to_player(COLOR_BLACK)].lower()):
            return color_to_player(COLOR_BLACK)
        else:
            raise('Unrecognized player, "{}"'.format(ui_player))

    def opponent(self, player):
        return next_player(player)

    def reset_state(self):
        self.state.reset()


class TttCliGameState(UiGameState):

    @classmethod
    def new_state(self, *args, **kwargs):
        return TttGameState(*args, **kwargs)

    @classmethod
    def from_cli_args(self, args):
        return self(args.num_rows, args.num_columns, args.num_spaces_to_win)

    def ui_action_to_action(self, ui_action):
        column = ord(ui_action[0].lower()) - ord('a')
        row = int(ui_action[1:]) - 1
        return self.state.cell_index(row, column)

    def action_to_ui_action(self, action):
        row = self.state.row(action)
        column = self.state.column(action)
        return chr(ord('a') + column) + str(row + 1)

    def player_to_ui_player(self, player):
        return str(TttBoardValues(player))

    def ui_player_to_player(self, ui_player):
        return TttBoardValues[ui_player.upper()]

    def opponent(self, player):
        return TttBoardValues(player).opponent()

    def reset_state(self):
        self.state.reset()


ALGS = [
    {
        'name': 'random',
        'factory':
        lambda args: RandomAgent(random.Random(args.random_seed).random),
        'arguments': [
            {
                'aliases': ['-r', '--random-seed'],
                'info': {
                    'type': int,
                    'default': datetime.now(),
                    'help': 'Defaults to system time.'
                }
            }
        ]
    },
    {
        'name': 'first',
        'factory': lambda args: FirstActionAgent(),
        'arguments': []
    },
    {
        'name': 'mcts',
        'factory': lambda args:
            MctsAgent(random.Random(args.random_seed), UctNode(args.ucb)),
        'arguments': [
            {
                'aliases': ['-r', '--random-seed'],
                'info': {
                    'type': int,
                    'default': datetime.now(),
                    'help': 'Defaults to system time.'
                }
            },
            {
                'aliases': ['--ucb'],
                'info': {
                    'type': float,
                    'default': 0.1,
                    'help': ('The exploration constant for the ' +
                             'Upper Confidence Bound algorithm used to ' +
                             'select nodes during search.')
                }
            }
                ]
    },
    {
        'name': 'rave',
        'factory': lambda args:
            RaveAgent(random.Random(args.random_seed),
                      RaveNode(args.ucb, args.limit)),
        'arguments': [
            {
                'aliases': ['-r', '--random-seed'],
                'info': {
                    'type': int,
                    'default': datetime.now(),
                    'help': 'Defaults to system time.'
                }
            },
            {
                'aliases': ['--ucb'],
                'info': {
                    'type': float,
                    'default': 0.1,
                    'help': ('The exploration constant for the ' +
                             'Upper Confidence Bound algorithm used to ' +
                             'select nodes during search.')
                }
            },
            {
                'aliases': ['--limit'],
                'info': {
                    'type': float,
                    'default': 300,
                    'help': ('The limit parameter to the RAVE algorithm. '
                             + 'Smaller limits will make RAVE more like UCT '
                             + 'and they behave identically when limit is set '
                             + 'to zero.')
                }
            }
                ]
    },
    {
        'name': 'minimax',
        'factory': lambda args: MinimaxAgent(),
        'arguments': []
    },
    {
        'name': 'alphabeta',
        'factory': lambda args: AlphaBetaAgent(),
        'arguments': []
    }
]


GAMES = [
    {
        'name': 'hex',
        'factory':
        lambda args: HexCliGameState(args.num_rows, args.num_columns),
        'arguments': [
            {
                'aliases': ['-n', '--num_rows'],
                'info': {
                    'type': int,
                    'default': 10,
                    'help': 'The number of rows on the board.'
                }
            },
            {
                'aliases': ['-m', '--num_columns'],
                'info': {
                    'type': int,
                    'default': 10,
                    'help': 'The number of columns on the board.'
                }
            }
        ],
        'algorithms': ALGS
    },
    {
        'name': 'ttt',
        'factory': TttCliGameState.from_cli_args,
        'arguments': [
            {
                'aliases': ['-n', '--num_rows'],
                'info': {
                    'type': int,
                    'default': 3,
                    'help': 'The number of rows on the board.'
                }
            },
            {
                'aliases': ['-m', '--num_columns'],
                'info': {
                    'type': int,
                    'default': 3,
                    'help': 'The number of columns on the board.'
                }
            },
            {
                'aliases': ['-k', '--num_spaces_to_win'],
                'info': {
                    'type': int,
                    'default': 3,
                    'help': 'The number of spaces in a row required to win.'
                }
            }
        ],
        'algorithms': ALGS
    }
]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        'Interact with a game agent using the GTP protocol.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-s', '--script',
                        help='A script of commands to play out.')
    logging_group = parser.add_mutually_exclusive_group()
    logging_group.add_argument('-v', '--verbose', action='store_true',
                        help='Show verbose output.')
    logging_group.add_argument('-t', '--teaching', action='store_true',
                        help='Show teaching output.')

    subparsers = parser.add_subparsers(title='games', dest='game')
    subparsers.required = True

    for game_option in GAMES:
        game_parser = subparsers.add_parser(
            game_option['name'],
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        game_parser.set_defaults(select_game=game_option['factory'])

        for argument in game_option['arguments']:
            game_parser.add_argument(*argument['aliases'], **argument['info'])

        game_subparsers = game_parser.add_subparsers(title='algorithms',
                                                     dest='algorithm')
        game_subparsers.required = True

        for algorithm_option in game_option['algorithms']:
            algorithm_parser = game_subparsers.add_parser(
                algorithm_option['name'],
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
            algorithm_parser.set_defaults(
                select_algorithm=algorithm_option['factory'])

            for argument in algorithm_option['arguments']:
                algorithm_parser.add_argument(*argument['aliases'],
                                              **argument['info'])

    args = parser.parse_args()
    selected_game = args.select_game(args)
    selected_algorithm = args.select_algorithm(args)

    if args.verbose:
        import logging
        logging.basicConfig(level=logging.DEBUG)
    if args.teaching:
        import logging
        logging.basicConfig(level=logging.INFO)
    try:
        cli = Cli(selected_game, selected_algorithm)
        if args.script is not None:
            with open(args.script) as f:
                for command in f:
                    command = command.strip()
                    print('< ' + command)
                    cli.onecmd(command)
        cli.cmdloop()
    except KeyboardInterrupt:
        pass
